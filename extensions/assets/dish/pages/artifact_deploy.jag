<%
var lg = new Log();
lg.info('Request received');
var caramel;
var params=request.getAllParameters();
lg.info('params: '+stringify(params));
lg.info(params.overview_name);

var overview_name = params.overview_name;
var overview_url = params.overview_url;
var interval = params.interval;

var ADMIN_SERVICE_URL = "https://localhost:9445/services"; // URL to admin services without last '/'
var USERNAME = "admin";
var PASSWORD = "admin";


var ws = require("ws");

var req = new ws.WSRequest();
var options = new Array();

options.useSOAP = 1.2;



// 1. Deploy Template
deployTemplate();

// 2. Deploy XSLT
deployTransformation();

// 3. Deploy Task
deployTask();




function deployTemplate(){
    // Method for importing resource
	options.action = "urn:importResource";

    var payload = '<ser:importResource xmlns:ser="http://services.resource.registry.carbon.wso2.org">'
						+ '<ser:parentPath>/_system/governance/recipeTemplates</ser:parentPath>'
						+ '<ser:resourceName>' + overview_name + '_template</ser:resourceName>'
						+ '<ser:mediaType>text/plain</ser:mediaType>'
						+ '<ser:description>template</ser:description>'
						+ '<ser:fetchURL>' + overview_url + '/template.xml</ser:fetchURL>'
					+ '</ser:importResource>';

	var result;

	try {
	      // Open connection to Resource Admin service - url currently hardcoded
	       req.open(options, ADMIN_SERVICE_URL + "/ResourceAdminService", false, USERNAME, PASSWORD); // URI with offset=2 in ESB//

	       // Send task.xml
	       req.send(payload);

	       // Get the result
	       result = req;


	} catch (e) {

	       print(e.toString()); // Print error if something goes wrong

	}


}

function deployTransformation(){
    // Method for importing resource
	options.action = "urn:importResource";

    var payload = '<ser:importResource xmlns:ser="http://services.resource.registry.carbon.wso2.org">'
						+ '<ser:parentPath>/_system/governance/recipeTransformations</ser:parentPath>'
						+ '<ser:resourceName>' + overview_name + '_transformation</ser:resourceName>'
						+ '<ser:mediaType>text/xml</ser:mediaType>'
						+ '<ser:description>transformation</ser:description>'
						+ '<ser:fetchURL>' + overview_url +'/transformation.xml' + '</ser:fetchURL>'
					+ '</ser:importResource>';

	var result;

	try {
	      // Open connection to Resource Admin service - url currently hardcoded
	       req.open(options, ADMIN_SERVICE_URL + "/ResourceAdminService", false, USERNAME, PASSWORD); // URI with offset=2 in ESB//

	       // Send task.xml
	       req.send(payload);

	       // Get the result
	       result = req;


	} catch (e) {

	       print(e.toString()); // Print error if something goes wrong

	}


}

function deployTask(){

    options.action = "urn:addTaskDescription";

    // Fetch file from url
    var taskData = get(overview_url + '/task.xml', '', 'xml');
    taskData = new XML(taskData.data);

    var log = new Log();
    log.info(taskData);



    try {
        // Open connection to Task Admin service - url currently hardcoded
        req.open(options, ADMIN_SERVICE_URL + "/TaskAdmin", false, USERNAME, PASSWORD); // URI with offset=2 in ESB//

        // Send task.xml
        req.send('<ns1:addTaskDescription xmlns:ns1="http://org.apache.axis2/xsd">' + taskData + '</ns1:addTaskDescription>');

        // Get the result
        result = req;


    } catch (e) {

// 		print(e.toString()); // Though deploying task is completed, still returns an error

    }


}

%>
